// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NESTHOLEDISTRIBUTIONENCOUNTER8ARCHIVE_PKNX_STRUCTURES_H_
#define FLATBUFFERS_GENERATED_NESTHOLEDISTRIBUTIONENCOUNTER8ARCHIVE_PKNX_STRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

namespace pkNX {
namespace Structures {

struct NestHoleDistributionEncounter8Archive;
struct NestHoleDistributionEncounter8ArchiveBuilder;

struct NestHoleDistributionEncounter8Table;
struct NestHoleDistributionEncounter8TableBuilder;

struct NestHoleDistributionEncounter8;
struct NestHoleDistributionEncounter8Builder;

struct NestHoleDistributionEncounter8Archive FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NestHoleDistributionEncounter8ArchiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Table>> *Tables() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Table>> *>(VT_TABLES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TABLES) &&
           verifier.VerifyVector(Tables()) &&
           verifier.VerifyVectorOfTables(Tables()) &&
           verifier.EndTable();
  }
};

struct NestHoleDistributionEncounter8ArchiveBuilder {
  typedef NestHoleDistributionEncounter8Archive Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Tables(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Table>>> Tables) {
    fbb_.AddOffset(NestHoleDistributionEncounter8Archive::VT_TABLES, Tables);
  }
  explicit NestHoleDistributionEncounter8ArchiveBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NestHoleDistributionEncounter8Archive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NestHoleDistributionEncounter8Archive>(end);
    return o;
  }
};

inline flatbuffers::Offset<NestHoleDistributionEncounter8Archive> CreateNestHoleDistributionEncounter8Archive(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Table>>> Tables = 0) {
  NestHoleDistributionEncounter8ArchiveBuilder builder_(_fbb);
  builder_.add_Tables(Tables);
  return builder_.Finish();
}

inline flatbuffers::Offset<NestHoleDistributionEncounter8Archive> CreateNestHoleDistributionEncounter8ArchiveDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Table>> *Tables = nullptr) {
  auto Tables__ = Tables ? _fbb.CreateVector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Table>>(*Tables) : 0;
  return pkNX::Structures::CreateNestHoleDistributionEncounter8Archive(
      _fbb,
      Tables__);
}

struct NestHoleDistributionEncounter8Table FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NestHoleDistributionEncounter8TableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TABLEID = 4,
    VT_GAMEVERSION = 6,
    VT_FIELD_02 = 8,
    VT_FIELD_03 = 10,
    VT_ENTRIES = 12
  };
  uint64_t TableID() const {
    return GetField<uint64_t>(VT_TABLEID, 0);
  }
  uint32_t GameVersion() const {
    return GetField<uint32_t>(VT_GAMEVERSION, 0);
  }
  int8_t Field_02() const {
    return GetField<int8_t>(VT_FIELD_02, 0);
  }
  int8_t Field_03() const {
    return GetField<int8_t>(VT_FIELD_03, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8>> *Entries() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8>> *>(VT_ENTRIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TABLEID) &&
           VerifyField<uint32_t>(verifier, VT_GAMEVERSION) &&
           VerifyField<int8_t>(verifier, VT_FIELD_02) &&
           VerifyField<int8_t>(verifier, VT_FIELD_03) &&
           VerifyOffset(verifier, VT_ENTRIES) &&
           verifier.VerifyVector(Entries()) &&
           verifier.VerifyVectorOfTables(Entries()) &&
           verifier.EndTable();
  }
};

struct NestHoleDistributionEncounter8TableBuilder {
  typedef NestHoleDistributionEncounter8Table Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_TableID(uint64_t TableID) {
    fbb_.AddElement<uint64_t>(NestHoleDistributionEncounter8Table::VT_TABLEID, TableID, 0);
  }
  void add_GameVersion(uint32_t GameVersion) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8Table::VT_GAMEVERSION, GameVersion, 0);
  }
  void add_Field_02(int8_t Field_02) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8Table::VT_FIELD_02, Field_02, 0);
  }
  void add_Field_03(int8_t Field_03) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8Table::VT_FIELD_03, Field_03, 0);
  }
  void add_Entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8>>> Entries) {
    fbb_.AddOffset(NestHoleDistributionEncounter8Table::VT_ENTRIES, Entries);
  }
  explicit NestHoleDistributionEncounter8TableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NestHoleDistributionEncounter8Table> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NestHoleDistributionEncounter8Table>(end);
    return o;
  }
};

inline flatbuffers::Offset<NestHoleDistributionEncounter8Table> CreateNestHoleDistributionEncounter8Table(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t TableID = 0,
    uint32_t GameVersion = 0,
    int8_t Field_02 = 0,
    int8_t Field_03 = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8>>> Entries = 0) {
  NestHoleDistributionEncounter8TableBuilder builder_(_fbb);
  builder_.add_TableID(TableID);
  builder_.add_Entries(Entries);
  builder_.add_GameVersion(GameVersion);
  builder_.add_Field_03(Field_03);
  builder_.add_Field_02(Field_02);
  return builder_.Finish();
}

inline flatbuffers::Offset<NestHoleDistributionEncounter8Table> CreateNestHoleDistributionEncounter8TableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t TableID = 0,
    uint32_t GameVersion = 0,
    int8_t Field_02 = 0,
    int8_t Field_03 = 0,
    const std::vector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8>> *Entries = nullptr) {
  auto Entries__ = Entries ? _fbb.CreateVector<flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8>>(*Entries) : 0;
  return pkNX::Structures::CreateNestHoleDistributionEncounter8Table(
      _fbb,
      TableID,
      GameVersion,
      Field_02,
      Field_03,
      Entries__);
}

struct NestHoleDistributionEncounter8 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NestHoleDistributionEncounter8Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTRYINDEX = 4,
    VT_SPECIES = 6,
    VT_ALTFORM = 8,
    VT_LEVEL = 10,
    VT_DYNAMAXLEVEL = 12,
    VT_FIELD_05 = 14,
    VT_FIELD_06 = 16,
    VT_FIELD_07 = 18,
    VT_FIELD_08 = 20,
    VT_FIELD_09 = 22,
    VT_FIELD_0A = 24,
    VT_ABILITY = 26,
    VT_ISGIGANTAMAX = 28,
    VT_DROPTABLEID = 30,
    VT_BONUSTABLEID = 32,
    VT_PROBABILITIES = 34,
    VT_GENDER = 36,
    VT_FLAWLESSIVS = 38,
    VT_SHINYFORCED = 40,
    VT_FIELD_13 = 42,
    VT_FIELD_14 = 44,
    VT_NATURE = 46,
    VT_FIELD_16 = 48,
    VT_MOVE0 = 50,
    VT_MOVE1 = 52,
    VT_MOVE2 = 54,
    VT_MOVE3 = 56,
    VT_DYNAMAXBOOST = 58,
    VT_FIELD_1C = 60,
    VT_FIELD_1D = 62,
    VT_FIELD_1E = 64,
    VT_FIELD_1F = 66,
    VT_FIELD_20 = 68,
    VT_FIELD_21 = 70,
    VT_FIELD_22 = 72,
    VT_FIELD_23 = 74,
    VT_FIELD_24 = 76
  };
  uint32_t EntryIndex() const {
    return GetField<uint32_t>(VT_ENTRYINDEX, 0);
  }
  uint32_t Species() const {
    return GetField<uint32_t>(VT_SPECIES, 0);
  }
  uint32_t AltForm() const {
    return GetField<uint32_t>(VT_ALTFORM, 0);
  }
  uint32_t Level() const {
    return GetField<uint32_t>(VT_LEVEL, 0);
  }
  uint16_t DynamaxLevel() const {
    return GetField<uint16_t>(VT_DYNAMAXLEVEL, 0);
  }
  uint32_t Field_05() const {
    return GetField<uint32_t>(VT_FIELD_05, 0);
  }
  uint32_t Field_06() const {
    return GetField<uint32_t>(VT_FIELD_06, 0);
  }
  uint32_t Field_07() const {
    return GetField<uint32_t>(VT_FIELD_07, 0);
  }
  uint32_t Field_08() const {
    return GetField<uint32_t>(VT_FIELD_08, 0);
  }
  uint32_t Field_09() const {
    return GetField<uint32_t>(VT_FIELD_09, 0);
  }
  uint32_t Field_0A() const {
    return GetField<uint32_t>(VT_FIELD_0A, 0);
  }
  int8_t Ability() const {
    return GetField<int8_t>(VT_ABILITY, 0);
  }
  bool IsGigantamax() const {
    return GetField<uint8_t>(VT_ISGIGANTAMAX, 0) != 0;
  }
  uint64_t DropTableID() const {
    return GetField<uint64_t>(VT_DROPTABLEID, 0);
  }
  uint64_t BonusTableID() const {
    return GetField<uint64_t>(VT_BONUSTABLEID, 0);
  }
  const flatbuffers::Vector<uint32_t> *Probabilities() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_PROBABILITIES);
  }
  int8_t Gender() const {
    return GetField<int8_t>(VT_GENDER, 0);
  }
  int8_t FlawlessIVs() const {
    return GetField<int8_t>(VT_FLAWLESSIVS, 0);
  }
  int8_t ShinyForced() const {
    return GetField<int8_t>(VT_SHINYFORCED, 0);
  }
  int8_t Field_13() const {
    return GetField<int8_t>(VT_FIELD_13, 0);
  }
  int8_t Field_14() const {
    return GetField<int8_t>(VT_FIELD_14, 0);
  }
  int8_t Nature() const {
    return GetField<int8_t>(VT_NATURE, 0);
  }
  uint32_t Field_16() const {
    return GetField<uint32_t>(VT_FIELD_16, 0);
  }
  uint32_t Move0() const {
    return GetField<uint32_t>(VT_MOVE0, 0);
  }
  uint32_t Move1() const {
    return GetField<uint32_t>(VT_MOVE1, 0);
  }
  uint32_t Move2() const {
    return GetField<uint32_t>(VT_MOVE2, 0);
  }
  uint32_t Move3() const {
    return GetField<uint32_t>(VT_MOVE3, 0);
  }
  float DynamaxBoost() const {
    return GetField<float>(VT_DYNAMAXBOOST, 0.0f);
  }
  uint32_t Field_1C() const {
    return GetField<uint32_t>(VT_FIELD_1C, 0);
  }
  uint32_t Field_1D() const {
    return GetField<uint32_t>(VT_FIELD_1D, 0);
  }
  uint32_t Field_1E() const {
    return GetField<uint32_t>(VT_FIELD_1E, 0);
  }
  uint32_t Field_1F() const {
    return GetField<uint32_t>(VT_FIELD_1F, 0);
  }
  uint32_t Field_20() const {
    return GetField<uint32_t>(VT_FIELD_20, 0);
  }
  uint32_t Field_21() const {
    return GetField<uint32_t>(VT_FIELD_21, 0);
  }
  uint32_t Field_22() const {
    return GetField<uint32_t>(VT_FIELD_22, 0);
  }
  uint32_t Field_23() const {
    return GetField<uint32_t>(VT_FIELD_23, 0);
  }
  uint32_t Field_24() const {
    return GetField<uint32_t>(VT_FIELD_24, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ENTRYINDEX) &&
           VerifyField<uint32_t>(verifier, VT_SPECIES) &&
           VerifyField<uint32_t>(verifier, VT_ALTFORM) &&
           VerifyField<uint32_t>(verifier, VT_LEVEL) &&
           VerifyField<uint16_t>(verifier, VT_DYNAMAXLEVEL) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_05) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_06) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_07) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_08) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_09) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_0A) &&
           VerifyField<int8_t>(verifier, VT_ABILITY) &&
           VerifyField<uint8_t>(verifier, VT_ISGIGANTAMAX) &&
           VerifyField<uint64_t>(verifier, VT_DROPTABLEID) &&
           VerifyField<uint64_t>(verifier, VT_BONUSTABLEID) &&
           VerifyOffset(verifier, VT_PROBABILITIES) &&
           verifier.VerifyVector(Probabilities()) &&
           VerifyField<int8_t>(verifier, VT_GENDER) &&
           VerifyField<int8_t>(verifier, VT_FLAWLESSIVS) &&
           VerifyField<int8_t>(verifier, VT_SHINYFORCED) &&
           VerifyField<int8_t>(verifier, VT_FIELD_13) &&
           VerifyField<int8_t>(verifier, VT_FIELD_14) &&
           VerifyField<int8_t>(verifier, VT_NATURE) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_16) &&
           VerifyField<uint32_t>(verifier, VT_MOVE0) &&
           VerifyField<uint32_t>(verifier, VT_MOVE1) &&
           VerifyField<uint32_t>(verifier, VT_MOVE2) &&
           VerifyField<uint32_t>(verifier, VT_MOVE3) &&
           VerifyField<float>(verifier, VT_DYNAMAXBOOST) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_1C) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_1D) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_1E) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_1F) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_20) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_21) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_22) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_23) &&
           VerifyField<uint32_t>(verifier, VT_FIELD_24) &&
           verifier.EndTable();
  }
};

struct NestHoleDistributionEncounter8Builder {
  typedef NestHoleDistributionEncounter8 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_EntryIndex(uint32_t EntryIndex) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_ENTRYINDEX, EntryIndex, 0);
  }
  void add_Species(uint32_t Species) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_SPECIES, Species, 0);
  }
  void add_AltForm(uint32_t AltForm) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_ALTFORM, AltForm, 0);
  }
  void add_Level(uint32_t Level) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_LEVEL, Level, 0);
  }
  void add_DynamaxLevel(uint16_t DynamaxLevel) {
    fbb_.AddElement<uint16_t>(NestHoleDistributionEncounter8::VT_DYNAMAXLEVEL, DynamaxLevel, 0);
  }
  void add_Field_05(uint32_t Field_05) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_05, Field_05, 0);
  }
  void add_Field_06(uint32_t Field_06) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_06, Field_06, 0);
  }
  void add_Field_07(uint32_t Field_07) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_07, Field_07, 0);
  }
  void add_Field_08(uint32_t Field_08) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_08, Field_08, 0);
  }
  void add_Field_09(uint32_t Field_09) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_09, Field_09, 0);
  }
  void add_Field_0A(uint32_t Field_0A) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_0A, Field_0A, 0);
  }
  void add_Ability(int8_t Ability) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8::VT_ABILITY, Ability, 0);
  }
  void add_IsGigantamax(bool IsGigantamax) {
    fbb_.AddElement<uint8_t>(NestHoleDistributionEncounter8::VT_ISGIGANTAMAX, static_cast<uint8_t>(IsGigantamax), 0);
  }
  void add_DropTableID(uint64_t DropTableID) {
    fbb_.AddElement<uint64_t>(NestHoleDistributionEncounter8::VT_DROPTABLEID, DropTableID, 0);
  }
  void add_BonusTableID(uint64_t BonusTableID) {
    fbb_.AddElement<uint64_t>(NestHoleDistributionEncounter8::VT_BONUSTABLEID, BonusTableID, 0);
  }
  void add_Probabilities(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Probabilities) {
    fbb_.AddOffset(NestHoleDistributionEncounter8::VT_PROBABILITIES, Probabilities);
  }
  void add_Gender(int8_t Gender) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8::VT_GENDER, Gender, 0);
  }
  void add_FlawlessIVs(int8_t FlawlessIVs) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8::VT_FLAWLESSIVS, FlawlessIVs, 0);
  }
  void add_ShinyForced(int8_t ShinyForced) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8::VT_SHINYFORCED, ShinyForced, 0);
  }
  void add_Field_13(int8_t Field_13) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8::VT_FIELD_13, Field_13, 0);
  }
  void add_Field_14(int8_t Field_14) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8::VT_FIELD_14, Field_14, 0);
  }
  void add_Nature(int8_t Nature) {
    fbb_.AddElement<int8_t>(NestHoleDistributionEncounter8::VT_NATURE, Nature, 0);
  }
  void add_Field_16(uint32_t Field_16) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_16, Field_16, 0);
  }
  void add_Move0(uint32_t Move0) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_MOVE0, Move0, 0);
  }
  void add_Move1(uint32_t Move1) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_MOVE1, Move1, 0);
  }
  void add_Move2(uint32_t Move2) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_MOVE2, Move2, 0);
  }
  void add_Move3(uint32_t Move3) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_MOVE3, Move3, 0);
  }
  void add_DynamaxBoost(float DynamaxBoost) {
    fbb_.AddElement<float>(NestHoleDistributionEncounter8::VT_DYNAMAXBOOST, DynamaxBoost, 0.0f);
  }
  void add_Field_1C(uint32_t Field_1C) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_1C, Field_1C, 0);
  }
  void add_Field_1D(uint32_t Field_1D) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_1D, Field_1D, 0);
  }
  void add_Field_1E(uint32_t Field_1E) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_1E, Field_1E, 0);
  }
  void add_Field_1F(uint32_t Field_1F) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_1F, Field_1F, 0);
  }
  void add_Field_20(uint32_t Field_20) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_20, Field_20, 0);
  }
  void add_Field_21(uint32_t Field_21) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_21, Field_21, 0);
  }
  void add_Field_22(uint32_t Field_22) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_22, Field_22, 0);
  }
  void add_Field_23(uint32_t Field_23) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_23, Field_23, 0);
  }
  void add_Field_24(uint32_t Field_24) {
    fbb_.AddElement<uint32_t>(NestHoleDistributionEncounter8::VT_FIELD_24, Field_24, 0);
  }
  explicit NestHoleDistributionEncounter8Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NestHoleDistributionEncounter8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NestHoleDistributionEncounter8>(end);
    return o;
  }
};

inline flatbuffers::Offset<NestHoleDistributionEncounter8> CreateNestHoleDistributionEncounter8(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t EntryIndex = 0,
    uint32_t Species = 0,
    uint32_t AltForm = 0,
    uint32_t Level = 0,
    uint16_t DynamaxLevel = 0,
    uint32_t Field_05 = 0,
    uint32_t Field_06 = 0,
    uint32_t Field_07 = 0,
    uint32_t Field_08 = 0,
    uint32_t Field_09 = 0,
    uint32_t Field_0A = 0,
    int8_t Ability = 0,
    bool IsGigantamax = false,
    uint64_t DropTableID = 0,
    uint64_t BonusTableID = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> Probabilities = 0,
    int8_t Gender = 0,
    int8_t FlawlessIVs = 0,
    int8_t ShinyForced = 0,
    int8_t Field_13 = 0,
    int8_t Field_14 = 0,
    int8_t Nature = 0,
    uint32_t Field_16 = 0,
    uint32_t Move0 = 0,
    uint32_t Move1 = 0,
    uint32_t Move2 = 0,
    uint32_t Move3 = 0,
    float DynamaxBoost = 0.0f,
    uint32_t Field_1C = 0,
    uint32_t Field_1D = 0,
    uint32_t Field_1E = 0,
    uint32_t Field_1F = 0,
    uint32_t Field_20 = 0,
    uint32_t Field_21 = 0,
    uint32_t Field_22 = 0,
    uint32_t Field_23 = 0,
    uint32_t Field_24 = 0) {
  NestHoleDistributionEncounter8Builder builder_(_fbb);
  builder_.add_BonusTableID(BonusTableID);
  builder_.add_DropTableID(DropTableID);
  builder_.add_Field_24(Field_24);
  builder_.add_Field_23(Field_23);
  builder_.add_Field_22(Field_22);
  builder_.add_Field_21(Field_21);
  builder_.add_Field_20(Field_20);
  builder_.add_Field_1F(Field_1F);
  builder_.add_Field_1E(Field_1E);
  builder_.add_Field_1D(Field_1D);
  builder_.add_Field_1C(Field_1C);
  builder_.add_DynamaxBoost(DynamaxBoost);
  builder_.add_Move3(Move3);
  builder_.add_Move2(Move2);
  builder_.add_Move1(Move1);
  builder_.add_Move0(Move0);
  builder_.add_Field_16(Field_16);
  builder_.add_Probabilities(Probabilities);
  builder_.add_Field_0A(Field_0A);
  builder_.add_Field_09(Field_09);
  builder_.add_Field_08(Field_08);
  builder_.add_Field_07(Field_07);
  builder_.add_Field_06(Field_06);
  builder_.add_Field_05(Field_05);
  builder_.add_Level(Level);
  builder_.add_AltForm(AltForm);
  builder_.add_Species(Species);
  builder_.add_EntryIndex(EntryIndex);
  builder_.add_DynamaxLevel(DynamaxLevel);
  builder_.add_Nature(Nature);
  builder_.add_Field_14(Field_14);
  builder_.add_Field_13(Field_13);
  builder_.add_ShinyForced(ShinyForced);
  builder_.add_FlawlessIVs(FlawlessIVs);
  builder_.add_Gender(Gender);
  builder_.add_IsGigantamax(IsGigantamax);
  builder_.add_Ability(Ability);
  return builder_.Finish();
}

inline flatbuffers::Offset<NestHoleDistributionEncounter8> CreateNestHoleDistributionEncounter8Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t EntryIndex = 0,
    uint32_t Species = 0,
    uint32_t AltForm = 0,
    uint32_t Level = 0,
    uint16_t DynamaxLevel = 0,
    uint32_t Field_05 = 0,
    uint32_t Field_06 = 0,
    uint32_t Field_07 = 0,
    uint32_t Field_08 = 0,
    uint32_t Field_09 = 0,
    uint32_t Field_0A = 0,
    int8_t Ability = 0,
    bool IsGigantamax = false,
    uint64_t DropTableID = 0,
    uint64_t BonusTableID = 0,
    const std::vector<uint32_t> *Probabilities = nullptr,
    int8_t Gender = 0,
    int8_t FlawlessIVs = 0,
    int8_t ShinyForced = 0,
    int8_t Field_13 = 0,
    int8_t Field_14 = 0,
    int8_t Nature = 0,
    uint32_t Field_16 = 0,
    uint32_t Move0 = 0,
    uint32_t Move1 = 0,
    uint32_t Move2 = 0,
    uint32_t Move3 = 0,
    float DynamaxBoost = 0.0f,
    uint32_t Field_1C = 0,
    uint32_t Field_1D = 0,
    uint32_t Field_1E = 0,
    uint32_t Field_1F = 0,
    uint32_t Field_20 = 0,
    uint32_t Field_21 = 0,
    uint32_t Field_22 = 0,
    uint32_t Field_23 = 0,
    uint32_t Field_24 = 0) {
  auto Probabilities__ = Probabilities ? _fbb.CreateVector<uint32_t>(*Probabilities) : 0;
  return pkNX::Structures::CreateNestHoleDistributionEncounter8(
      _fbb,
      EntryIndex,
      Species,
      AltForm,
      Level,
      DynamaxLevel,
      Field_05,
      Field_06,
      Field_07,
      Field_08,
      Field_09,
      Field_0A,
      Ability,
      IsGigantamax,
      DropTableID,
      BonusTableID,
      Probabilities__,
      Gender,
      FlawlessIVs,
      ShinyForced,
      Field_13,
      Field_14,
      Nature,
      Field_16,
      Move0,
      Move1,
      Move2,
      Move3,
      DynamaxBoost,
      Field_1C,
      Field_1D,
      Field_1E,
      Field_1F,
      Field_20,
      Field_21,
      Field_22,
      Field_23,
      Field_24);
}

inline const pkNX::Structures::NestHoleDistributionEncounter8Archive *GetNestHoleDistributionEncounter8Archive(const void *buf) {
  return flatbuffers::GetRoot<pkNX::Structures::NestHoleDistributionEncounter8Archive>(buf);
}

inline const pkNX::Structures::NestHoleDistributionEncounter8Archive *GetSizePrefixedNestHoleDistributionEncounter8Archive(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<pkNX::Structures::NestHoleDistributionEncounter8Archive>(buf);
}

inline bool VerifyNestHoleDistributionEncounter8ArchiveBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<pkNX::Structures::NestHoleDistributionEncounter8Archive>(nullptr);
}

inline bool VerifySizePrefixedNestHoleDistributionEncounter8ArchiveBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<pkNX::Structures::NestHoleDistributionEncounter8Archive>(nullptr);
}

inline const char *NestHoleDistributionEncounter8ArchiveExtension() {
  return "bin";
}

inline void FinishNestHoleDistributionEncounter8ArchiveBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Archive> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNestHoleDistributionEncounter8ArchiveBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<pkNX::Structures::NestHoleDistributionEncounter8Archive> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Structures
}  // namespace pkNX

#endif  // FLATBUFFERS_GENERATED_NESTHOLEDISTRIBUTIONENCOUNTER8ARCHIVE_PKNX_STRUCTURES_H_
